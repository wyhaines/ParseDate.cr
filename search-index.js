crystal_doc_search_index_callback({"repository_name":"parse_date","body":"# parsedate\n\n![ParseDate.cr CI](https://img.shields.io/github/workflow/status/wyhaines/ParseDate.cr/ParseDate%20CI?style=for-the-badge&logo=GitHub)\n[![GitHub release](https://img.shields.io/github/release/wyhaines/ParseDate.cr.svg?style=for-the-badge)](https://github.com/wyhaines/ParseDate.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/ParseDate.cr/latest?style=for-the-badge)\n\nThis utility tries to brute force match a time/date against a hierarchy of possible formats in order to be able to broadly accept, and parse a wide range of date specifications.\n\nIt iterates through a list for formats, attempting to match against each date specification in turn, until either a match is found or the list is exhausted. The current set of formats is:\n  \n1) Time::Format::YAML_DATE\n2) Time::Format::ISO_8601_DATE_TIME\n3) Time::Format::ISO_8601_DATE\n4) Time::Format::ISO_8601_TIME\n5) Time::Format::RFC_2822\n6) Time::Format::RFC_3339\n7) Time::Format::HTTP_DATE\n8) ParseDate::Format::UsMil\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     parsedate:\n       github: wyhaines/ParseDate.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"parse_date\"\n```\n\ndt = ParseDate.parse(\"2020-07-20\")\ndt = ParseDate.parse(\"2008-04-17 08:55:11.842682 -06:00\")\n\nSee the [spec file](spec/parse_date_spec.cr) for many examples of parseable dates.\n\n## Development\n\nThis library is simple and inefficient in its operation. It would be nice to have an actual date parser that would intelligently attempt to figure out a date in order to produce a Time without\nutilizing a brute force approach. Someday...\n\n## Contributing\n\n1. Fork it (<https://github.com/wyhaines/parsedate/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/ParseDate.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/serf-handler.cr?style=for-the-badge)","program":{"html_id":"parse_date/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"parse_date","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"parse_date/ParseDate","path":"ParseDate.html","kind":"class","full_name":"ParseDate","name":"ParseDate","abstract":false,"superclass":{"html_id":"parse_date/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"parse_date/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"parse_date/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"parse_date","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DEFAULT_FORMATS","name":"DEFAULT_FORMATS","value":"[Time::Format::YAML_DATE, Time::Format::ISO_8601_DATE_TIME, Time::Format::ISO_8601_DATE, Time::Format::ISO_8601_TIME, Time::Format::RFC_2822, Time::Format::RFC_3339, Time::Format::HTTP_DATE, ParseDate::Format::UsMil]","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"This utility tries to brute force match a time/date against a hierarchy\nof possible formats in order to be able to broadly accept, and parse a\nwide range of date specifications.\n\nIt iterates through a list for formats, attempting to match against\neach date specification in turn, until either a match is found or the\nlist is exhausted. The current set of formats is:\n\n1) Time::Format::YAML_DATE\n2) Time::Format::ISO_8601_DATE_TIME\n3) Time::Format::ISO_8601_DATE\n4) Time::Format::ISO_8601_TIME\n5) Time::Format::RFC_2822\n6) Time::Format::RFC_3339\n7) Time::Format::HTTP_DATE\n8) ParseDate::Format::UsMil","summary":"<p>This utility tries to brute force match a time/date against a hierarchy of possible formats in order to be able to broadly accept, and parse a wide range of date specifications.</p>","class_methods":[{"id":"parse(string:String?,fallback:Bool=true,formats=DEFAULT_FORMATS):Time?-class-method","html_id":"parse(string:String?,fallback:Bool=true,formats=DEFAULT_FORMATS):Time?-class-method","name":"parse","doc":"Parse a string into a Time.\n\nThe string to parse is a mandatory argument. If a nil is received,\nthe method will return nil.\n\nIf `fallback` is set to true (the default), then if the date can not\nbe parsed, it will attempt to convert slashes to dashes before trying\nagain.\n\nThe `formats` parameter can be used to overide the default list of\nformats to attempt to match. If omitted, the default set specified\nabove is used.","summary":"<p>Parse a string into a Time.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String | ::Nil"},{"name":"fallback","doc":null,"default_value":"true","external_name":"fallback","restriction":"Bool"},{"name":"formats","doc":null,"default_value":"DEFAULT_FORMATS","external_name":"formats","restriction":""}],"args_string":"(string : String?, fallback : Bool = <span class=\"n\">true</span>, formats = <span class=\"t\">DEFAULT_FORMATS</span>) : Time?","args_html":"(string : String?, fallback : Bool = <span class=\"n\">true</span>, formats = <span class=\"t\">DEFAULT_FORMATS</span>) : Time?","location":{"filename":"src/parse_date.cr","line_number":46,"url":null},"def":{"name":"parse","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String | ::Nil"},{"name":"fallback","doc":null,"default_value":"true","external_name":"fallback","restriction":"Bool"},{"name":"formats","doc":null,"default_value":"DEFAULT_FORMATS","external_name":"formats","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time | ::Nil","visibility":"Public","body":"if string.nil?\n  return nil\nend\ndt : Time | ::Nil = nil\nformats.each do |fmt|\n  dt = if fmt.responds_to?(:\"parse?\")\n    begin\n      fmt.parse?(string)\n    rescue\n      nil\n    end\n  else\n    begin\n      fmt.parse(string)\n    rescue\n      nil\n    end\n  end\n  if dt.nil?\n  else\n    break\n  end\nend\nif dt.nil? && fallback\n  if (string.strip.index(\"/\")).try(&.>(0))\n    new_string = string.gsub(\"/\", \"-\")\n  end\n  if new_string.nil?\n  else\n    dt = parse(new_string, false)\n  end\nend\ndt\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"parse_date/ParseDate/Format","path":"ParseDate/Format.html","kind":"module","full_name":"ParseDate::Format","name":"Format","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"parse_date","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"parse_date/ParseDate","kind":"class","full_name":"ParseDate","name":"ParseDate"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"parse_date/ParseDate/Format/UsMil","path":"ParseDate/Format/UsMil.html","kind":"class","full_name":"ParseDate::Format::UsMil","name":"UsMil","abstract":false,"superclass":{"html_id":"parse_date/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"parse_date/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"parse_date/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"parse_date","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"FORMATS","name":"FORMATS","value":"[\"%d %b %Y\", \"%d %B %Y\", \"%d%b%Y\", \"%d%B%Y\", \"%d %H%M %b %Y\", \"%d %H%M %B %Y\", \"%d%H%M%b%Y\", \"%d%H%M%B%Y\", \"%d %H%M%S %b %Y\", \"%d %H%M%S %B %Y\", \"%d%H%M%S%b%Y\", \"%d%H%M%S%B%Y\"]","doc":"TODO: Add proper time zone support.","summary":"<p><span class=\"flag orange\">TODO</span>  Add proper time zone support.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"parse_date/ParseDate/Format","kind":"module","full_name":"ParseDate::Format","name":"Format"},"doc":null,"summary":null,"class_methods":[{"id":"parse(string,location:Time::Location?=Time::Location::UTC):Time?-class-method","html_id":"parse(string,location:Time::Location?=Time::Location::UTC):Time?-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""},{"name":"location","doc":null,"default_value":"Time::Location::UTC","external_name":"location","restriction":"Time::Location | ::Nil"}],"args_string":"(string, location : Time::Location? = <span class=\"t\">Time</span><span class=\"t\">::</span><span class=\"t\">Location</span><span class=\"t\">::</span><span class=\"t\">UTC</span>) : Time?","args_html":"(string, location : Time::Location? = <span class=\"t\">Time</span><span class=\"t\">::</span><span class=\"t\">Location</span><span class=\"t\">::</span><span class=\"t\">UTC</span>) : Time?","location":{"filename":"src/format/usmil.cr","line_number":20,"url":null},"def":{"name":"parse","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""},{"name":"location","doc":null,"default_value":"Time::Location::UTC","external_name":"location","restriction":"Time::Location | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time | ::Nil","visibility":"Public","body":"dt : Time | ::Nil = nil\nFORMATS.each do |format|\n  dt = begin\n    (Time::Format.new(format, location)).parse(string)\n  rescue\n    nil\n  end\n  if dt.nil?\n  else\n    break\n  end\nend\ndt\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}})